// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler: v-for codegen basic v-for 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { openBlock: _openBlock, createVNode: _createVNode, createBlock: _createBlock, Fragment: _Fragment, renderList: _renderList } = _Vue
    
    return (_openBlock(), _createBlock(_Fragment, null, _renderList(items, (item) => {
      return _createVNode(\\"span\\")
    })))
  }
}"
`;

exports[`compiler: v-for codegen skipped key 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { openBlock: _openBlock, createVNode: _createVNode, createBlock: _createBlock, Fragment: _Fragment, renderList: _renderList } = _Vue
    
    return (_openBlock(), _createBlock(_Fragment, null, _renderList(items, (value, __, index) => {
      return _createVNode(\\"span\\")
    })))
  }
}"
`;

exports[`compiler: v-for codegen skipped value & key 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { openBlock: _openBlock, createVNode: _createVNode, createBlock: _createBlock, Fragment: _Fragment, renderList: _renderList } = _Vue
    
    return (_openBlock(), _createBlock(_Fragment, null, _renderList(items, (_, __, index) => {
      return _createVNode(\\"span\\")
    })))
  }
}"
`;

exports[`compiler: v-for codegen skipped value 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { openBlock: _openBlock, createVNode: _createVNode, createBlock: _createBlock, Fragment: _Fragment, renderList: _renderList } = _Vue
    
    return (_openBlock(), _createBlock(_Fragment, null, _renderList(items, (_, key, index) => {
      return _createVNode(\\"span\\")
    })))
  }
}"
`;

exports[`compiler: v-for codegen template v-for 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { openBlock: _openBlock, createVNode: _createVNode, createBlock: _createBlock, Fragment: _Fragment, renderList: _renderList } = _Vue
    
    return (_openBlock(), _createBlock(_Fragment, null, _renderList(items, (item) => {
      return [
        \\"hello\\",
        _createVNode(\\"span\\")
      ]
    })))
  }
}"
`;

exports[`compiler: v-for codegen v-if + v-for 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { openBlock: _openBlock, createVNode: _createVNode, createBlock: _createBlock, Fragment: _Fragment, renderList: _renderList, Empty: _Empty } = _Vue
    
    return (_openBlock(), ok
      ? _createBlock(_Fragment, { key: 0 }, _renderList(list, (i) => {
          return _createVNode(\\"div\\")
        }))
      : _createBlock(_Empty))
  }
}"
`;

exports[`compiler: v-for codegen value + key + index 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { openBlock: _openBlock, createVNode: _createVNode, createBlock: _createBlock, Fragment: _Fragment, renderList: _renderList } = _Vue
    
    return (_openBlock(), _createBlock(_Fragment, null, _renderList(items, (item, key, index) => {
      return _createVNode(\\"span\\")
    })))
  }
}"
`;
