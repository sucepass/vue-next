// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler: integration tests function mode 1`] = `
"const _Vue = Vue

return function render() {
  with (this) {
    const { createVNode: _createVNode, toString: _toString, openBlock: _openBlock, createBlock: _createBlock, Empty: _Empty, Fragment: _Fragment, renderList: _renderList } = _Vue
    
    return _createVNode(\\"div\\", {
      id: \\"foo\\",
      class: bar.baz
    }, [
      _toString(world.burn()),
      (_openBlock(), ok
        ? _createBlock(\\"div\\", { key: 0 }, \\"yes\\")
        : _createBlock(_Fragment, { key: 1 }, [
            \\"no\\"
          ])),
      _createVNode(_Fragment, null, _renderList(list, (value, index) => {
        return (_openBlock(), _createBlock(\\"div\\", null, [
          _createVNode(\\"span\\", null, _toString(value + index))
        ]))
      }), 128 /* UNKEYED_FRAGMENT */)
    ], 2 /* CLASS */)
  }
}"
`;

exports[`compiler: integration tests function mode w/ prefixIdentifiers: true 1`] = `
"const { createVNode, toString, openBlock, createBlock, Empty, Fragment, renderList } = Vue

return function render() {
  const _ctx = this
  return createVNode(\\"div\\", {
    id: \\"foo\\",
    class: _ctx.bar.baz
  }, [
    toString(_ctx.world.burn()),
    (openBlock(), (_ctx.ok)
      ? createBlock(\\"div\\", { key: 0 }, \\"yes\\")
      : createBlock(Fragment, { key: 1 }, [
          \\"no\\"
        ])),
    createVNode(Fragment, null, renderList(_ctx.list, (value, index) => {
      return (openBlock(), createBlock(\\"div\\", null, [
        createVNode(\\"span\\", null, toString(value + index))
      ]))
    }), 128 /* UNKEYED_FRAGMENT */)
  ], 2 /* CLASS */)
}"
`;

exports[`compiler: integration tests module mode 1`] = `
"import { createVNode, toString, openBlock, createBlock, Empty, Fragment, renderList } from \\"vue\\"

export default function render() {
  const _ctx = this
  return createVNode(\\"div\\", {
    id: \\"foo\\",
    class: _ctx.bar.baz
  }, [
    _toString(_ctx.world.burn()),
    (openBlock(), (_ctx.ok)
      ? createBlock(\\"div\\", { key: 0 }, \\"yes\\")
      : createBlock(Fragment, { key: 1 }, [
          \\"no\\"
        ])),
    createVNode(Fragment, null, renderList(_ctx.list, (value, index) => {
      return (openBlock(), createBlock(\\"div\\", null, [
        createVNode(\\"span\\", null, _toString(value + index))
      ]))
    }), 128 /* UNKEYED_FRAGMENT */)
  ], 2 /* CLASS */)
}"
`;
